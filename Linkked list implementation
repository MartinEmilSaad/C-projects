class List
{
	node*head;
public:
	List();
	List(int);
	void delete_node(int);
	void add_node(node);  // Add at the beginning
	int get_value(int);
	void sort();
	void sort_bubble();
	void print_from_end(int);
	//friend class mystack;
};


void List::print_from_end(int n)
{
	node*temp1 = head  , *temp2 = head; 
	int i = 0 ;
	while(temp2->next)
	{
		while (i<n&&temp2->next)
		{
			temp2=temp2->next;
			i++;
		}
		if(temp2->next==NULL)
		{
			cout<<temp1->value<<endl;
			break;
		}
		temp1 = temp1->next; i = 0 ;
	}
}

List::List()
{
	head=new node[1];
	head->setNext(NULL);
	head->value=0;
}


List::List(int value)
{
	head=new node[1];
	head->setNext(NULL);
	head->value=value;
} 


void List::add_node(node a)
{
	node*temp=head; node*temp2;
	while(temp->next)
	{
		temp=temp->next;
	}
	/*
	temp2=new node[1];
	temp2->value=a.getValue();
	temp2->next=NULL;
	temp->next=temp2;
	*/
	temp->next=new node[1];
	temp->next->value=a.getValue();
	temp->next->next=NULL;
}

void List::delete_node(int index)
{
	int i = 0 ;
	node*temp=head;
	node *temp2;
	while(temp)
	{
		if(index==0)
		{
			if(head->next) 
			{
					head=head->next;
					delete[]temp;
					return;
			}
			else delete[]head;
		}
		if((i+1)==index)
		{
			if(temp->next)  // Make sure the the wanted element exsists
			{
				if(temp->next->next)  // Make sure the the wanted element isn't the last one.
				{
					temp2=temp->next;
					temp->next=temp->next->next;
					delete[]temp2;
					return;
				}
				else  // It's the last element
				{
					delete[](temp->next);
					return;
				}
			}
		}
		else
			temp=temp->next;
	}
	cout<<"Element of this index isn;t found"<<endl;
}



int List::get_value(int index)
{
	node*temp=head;
	int i = 0 ;
	while(temp)
	{
		if(i==index)
			return temp->value;
		else 
		{
			temp=temp->next;
			i++;
		}
	}
	return -1;
}

void List::sort()   // Sorting list using selection sort
{
	node*temp=head,*temp2=head;
	while(temp)
	{
		temp2=temp->next;
		while(temp2)
		{
			if(temp->value>temp2->value)
			{
				int temp3 = temp->value;
				temp->value=temp2->value;
				temp2->value=temp3;
			}
			temp2=temp2->next;
		}
		temp=temp->next;
	}
}



void List::sort_bubble()
{
	node*temp = head , *temp2=head , *temp3 = head ;  bool flag = true ;
	while(temp->next)
	{
		temp2=head;
		while( (temp2->next&&flag)|| (temp2->next!=temp3&&!flag) )
		{
			if(temp2->value > temp2->next->value)
			{
				int tem = temp2->value;
				temp2->value = temp2->next->value;
				temp2->next->value = tem;
			}
			temp2=temp2->next;
		}
		temp3 = temp2 ; flag = false;
		temp=temp->next;
	}
}
